# -*- coding: utf-8 -*-
"""DiscountedCashFlowModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jyh8x1pV-fZCy0a696w7RPj-hHutfhy7

This is my first DCF in Python. I created it to better understand how DCFs are structured, and Iâ€™m particularly interested in how variables such as FCF projections and WACC can substantially impact the final outcome.

## Imports and Definitions
"""

!pip install yahooquery

import pandas as pd
import datetime
import time
import numpy as np
from yahooquery import Ticker

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

symbol = 'AMZN'

stock = Ticker(symbol)

"""## Getting Balance Sheet, Income Statement, and Cash Flow Statement"""

stock.balance_sheet()

"""Cleaning the Data"""

df_balance = pd.DataFrame(stock.balance_sheet())

df_balance['asOfDate'] = pd.to_datetime(df_balance['asOfDate'])
df_balance.set_index('asOfDate', inplace=True)

currency = df_balance['currencyCode'].iloc[0]
balance_period = df_balance['periodType'].iloc[0]

df_balance = df_balance.iloc[:, 2:]

df_balance

df_income = pd. DataFrame(stock.income_statement())
df_income['asOfDate'] = pd.to_datetime(df_income['asOfDate'])
df_income.set_index('asOfDate', inplace=True)
income_period = df_income[ 'periodType']. iloc[0]
df_income = df_income.iloc[:, 2:]

df_income

df_cash = pd.DataFrame(stock.cash_flow())
df_cash['asOfDate'] = pd.to_datetime(df_cash['asOfDate'])
df_cash.set_index('asOfDate', inplace=True)
cash_period = df_cash['periodType'].iloc[0]
df_cash = df_cash.iloc[:, 2:]
df_cash

"""## Calculations + Ratios"""

#Current and Quick Ratio
df_balance['Current Ratio'] = df_balance['CurrentAssets'] / df_balance['CurrentLiabilities']
df_balance['Quick Ratio'] = (df_balance['CurrentAssets'] - df_balance['Inventory']) / df_balance['CurrentLiabilities']

df_balance['Debt to Equity Ratio'] = df_balance['LongTermDebt'] / df_balance['StockholdersEquity']
df_balance['Debt to Assets Ratio'] = df_balance['LongTermDebt'] / df_balance['TotalAssets']

df_income_unique_dates = df_income[~df_income.index.duplicated(keep='first')]

income_aligned = df_income_unique_dates['CostOfRevenue'].reindex(df_balance.index, method='nearest')

average_inventory = (df_balance['Inventory'] + df_balance['Inventory'].shift(1)) / 2

df_balance['Inventory Turnover Ratio'] = income_aligned / average_inventory

display(df_balance[['Inventory', 'Inventory Turnover Ratio']].dropna())

"""## Getting Shares Outstanding + WACC"""

amzn = Ticker("AMZN")

# Get key statistics, including shares outstanding
shares_outstanding = amzn.key_stats["AMZN"]["sharesOutstanding"]

print(f"Amazon Shares Outstanding: {shares_outstanding:,}")

"""Different sources give Amazon a WACC of 8.2 to 10.6%, I am going to test combinations"""

WACC = 0.082

"""## Discounted Cash Flow"""

historical_fcf = stock.cash_flow( trailing=False)['FreeCashFlow']
print("Historical Free Cash Flow:")
display(historical_fcf)

# Placeholder for future Free Cash Flow (replace with your own projections)
future_fcf = [150171000000, 179338000000, 211962000000]

def present_value(fcf,WACC):
  return [fcf[i] / (1 + WACC) ** (i + 1) for i in range(len(fcf))]

pv = present_value(fcf = future_fcf, WACC = WACC)
print("Present Value of Future Free Cash Flows:")
display(pv)

# Calculate the sum of the present values
sum_of_pv = sum(pv)
print("\nSum of Present Values:")
display(sum_of_pv)

long_term_growth_rate = 0.02
last_projected_fcf = future_fcf[-1]

terminal_value = (last_projected_fcf * (1 + long_term_growth_rate)) / (WACC - long_term_growth_rate)

print(f"\nTerminal Value: {terminal_value:,.2f}")

num_years = len(future_fcf)

present_value_terminal_value = terminal_value / (1 + WACC) ** num_years

print(f"Present Value of Terminal Value: {present_value_terminal_value:,.2f}")

total_intrinsic_value = sum_of_pv + present_value_terminal_value

print(f"Total Intrinsic Value: {total_intrinsic_value:,.2f}")

intrinsic_value_per_share = total_intrinsic_value / shares_outstanding
print(f"Intrinsic Value Per Share: ${intrinsic_value_per_share:,.2f}")

"""## Final Observations

This is obviously not the most professional DCF of all time, but I did learn a lot from doing it. Throughout all the projections I pulled from different analysts, its incredibly interesting how estimates can substantially change the final estimations per share.

Without changing my future cash flow projections for Amazon, I used both extremes of WACC estimates. Using the minimum range of the WACC (8,2%), I got a final intrinsic value per share of $301.19, an extremely different value than the current $228.15 the stock currently sits at. On the other hand, the high end WACC estimation of 10.6% gives me a final intrinsic value per share of $215.40, a value much closer to the true $228.15 we are currently at.

This is obviously not the most professional DCF of all time, but I did learn a lot from doing it. Throughout all the projections I pulled from different analysts, it's incredibly interesting how estimates can substantially change the final estimations per share.

Without changing my future cash flow projections for Amazon, I used both extremes of WACC estimates to see their impact. Using a low WACC of 8.2%, my intrinsic value estimate is 301.19 USD per share, well above the current price of 228.15 USD. At the high WACC of 10.6%, the estimate falls to 215.40 USD per share, much closer to the market price.

I really enjoyed this little project, but my main takeaway is that I still have so much to learn about DCFs until I fully understand them. Before I continue making more, I'm am going to go back to studying their concepts, as I think being able to do it without understanding it conceptually is pointless.
"""